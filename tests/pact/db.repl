(env-data { "k": { "keys": ["admin"], "pred": "=" } })
(env-keys ["admin"])
(begin-tx)
(define-keyset 'k (read-keyset "k"))
(module dbtest 'k

  (defschema person
    name:string
    age:integer
    dob:time)

  (deftable persons:{person})

  (defconst ID_A "A")
  (defconst ROW_A:{person}
    { 'name:"joe", 'age:46, "dob":(parse-time "%F" "1970-01-01") })

  (deftable stuff)

)

(create-table persons)
(create-table stuff)

(commit-tx)

(use 'dbtest)
(begin-tx)
(insert persons ID_A ROW_A)
(expect-failure "dupe key should fail" (insert persons ID_A ROW_A))
(commit-tx)
(expect "keys works" [ID_A] (keys persons))
(expect "txids works" [1] (txids persons 0))
(expect "txlog works"
        (json [{"value":ROW_A,"key":ID_A,"table":"USER_dbtest_persons"}])
        (txlog persons 1))
(insert stuff "k" { "stuff": { "dec": 1.2, "bool": true, "int": -3, "time": (parse-time "%F" "1970-01-01") } })
(expect "object stored as value" "value" (typeof (at "stuff" (read stuff "k"))))
(env-keys ["joe"])
(expect-failure "insert protected by admin key" (insert persons "foo" ROW_A))
(expect-failure "keys protected by admin key" (keys persons))
(expect-failure "txids protected by admin key" (txids persons 0))
(expect-failure "txlog protected by admin key" (txlog persons 2))
