(env-data { "k": { "keys": ["admin"], "pred": "=" } })
(env-keys ["admin"])
(begin-tx)
(define-keyset 'k (read-keyset "k"))
(module dbtest 'k

  (defschema person
    name:string
    age:integer
    dob:time)

  (deftable persons:{person})

  (defconst ID_A "A")
  (defconst ROW_A:{person}
    { 'name:"joe", 'age:46, "dob":(parse-time "%F" "1970-01-01") })

)

(create-table persons)

(commit-tx)

(use 'dbtest)
(begin-tx)
(insert persons ID_A ROW_A)
(expect-failure "dupe key should fail" (insert persons ID_A ROW_A))
(commit-tx)
(expect "keys works" [ID_A] (keys persons))
(expect "txids works" [2] (txids persons 0))
(expect "txlog works"
        (json [{"value":ROW_A,"key":ID_A,"table":"dbtest.persons"}])
        (txlog persons 2))
(env-keys ["joe"])
(expect-failure "insert protected by admin key" (insert persons "foo" ROW_A))
(expect-failure "keys protected by admin key" (keys persons))
(expect-failure "txids protected by admin key" (txids persons 0))
(expect-failure "txlog protected by admin key" (txlog persons 2))

(expect "read-msg no arg works. TODO move to dedicated environment test"
        (json { "k": { "keys": ["admin"], "pred": "=" } }) (read-msg))
