
TopFun
  { _tlFun =
      FDefun
      { _fInfo = "(defun tricky1 (a:integer b:integer) (enforce (and (> a b) (enf-gt a b))))"
      , _fName = "analyze-tests.tricky1"
      , _fType = "(a:integer b:integer)-><n>"
      , _fArgs = ["a"(analyze-tests.tricky1_a0::integer),"b"(analyze-tests.tricky1_b1::integer)]
      , _fBody =
        [ App { _aNode = appNenforce2::bool
              , _aAppFun = FNative
                { _fInfo = ""
                , _fName = "enforce"
                , _fTypes = "(test:bool msg:string)->bool :| []"
                , _fSpecial = Nothing}
              , _aAppArgs =
                [ App { _aNode = appNand3::bool
                      , _aAppFun = FNative
                        { _fInfo = ""
                        , _fName = "and"
                        , _fTypes = "(x:bool y:bool)->bool :| []"
                        , _fSpecial = Nothing}
                      , _aAppArgs =
                        [ App { _aNode = appN>4::bool
                              , _aAppFun = FNative {_fInfo = "", _fName = ">", _fTypes = "(x:<a[integer,decimal,string,time]> y:<a[integer,decimal,string,time]>)->bool :| []", _fSpecial = Nothing}
                              , _aAppArgs = [Var {_aNode = analyze-tests.tricky1_a0::integer},Var {_aNode = analyze-tests.tricky1_b1::integer}]
                              }
                        , App { _aNode = appDanalyze-tests.enf-gt9::bool
                              , _aAppFun = FDefun { _fInfo = "(defun enf-gt (a:integer b:integer) (enforce (> a b)))"
                                                  , _fName = "analyze-tests.enf-gt"
                                                  , _fType = "(a:integer b:integer)-><m>"
                                                  , _fArgs = ["a"(analyze-tests.enf-gt_a5::integer),"b"(analyze-tests.enf-gt_b6::integer)]
                                                  , _fBody = [App {_aNode = appNenforce7::bool
                                                                  , _aAppFun = FNative {_fInfo = "", _fName = "enforce", _fTypes = "(test:bool msg:string)->bool :| []", _fSpecial = Nothing}
                                                                  , _aAppArgs =
                                                                    [ App {_aNode = appN>8::bool
                                                                          , _aAppFun = FNative {_fInfo = "", _fName = ">"
                                                                                               , _fTypes = "(x:<a[integer,decimal,string,time]> y:<a[integer,decimal,string,time]>)->bool :| []"
                                                                                               , _fSpecial = Nothing}
                                                                          , _aAppArgs = [Var {_aNode = analyze-tests.tricky1_a0::integer},Var {_aNode = analyze-tests.tricky1_b1::integer}]
                                                                          }
                                                                    ]
                                                                  }
                                                             ]
                                                  , _fDocs = Nothing}
                              , _aAppArgs = [Var {_aNode = analyze-tests.tricky1_a0::integer},Var {_aNode = analyze-tests.tricky1_b1::integer}]
                              }
                        ]
                      }
                ]
              }
        ]
      , _fDocs = Nothing}}

TopFun
  { _tlFun = FDefun
    { _fInfo = "defun tricky1 (a:integer b:integer)"
    , _fName = "analyze-tests.tricky1"
    , _fType = (a:integer b:integer)-><n>
    , _fArgs = ["a"(analyze-tests.tricky1_a0::integer),"b"(analyze-tests.tricky1_b1::integer)]
    , _fBody =
      [ App { _aNode = appNenforce2::bool
            , _aAppFun = FNative {_fInfo = "", _fName = "enforce", _fTypes = "(test:bool msg:string)->bool :| []", _fSpecial = Nothing}
            , _aAppArgs =
              [ App { _aNode = appNand3::bool, _aAppFun = FNative {_fInfo = "", _fName = "and", _fTypes = "(x:bool y:bool)->bool :| []", _fSpecial = Nothing}
                    , _aAppArgs =
                      [App { _aNode = appN>4::bool
                           , _aAppFun = FNative {_fInfo = "", _fName = ">", _fTypes = "(x:<a[integer,decimal,string,time]> y:<a[integer,decimal,string,time]>)->bool :| []", _fSpecial = Nothing}
                           , _aAppArgs =
                             [ Var {_aNode = analyze-tests.tricky1_a0::integer}
                             , Var {_aNode = analyze-tests.tricky1_b1::integer}]
                           }
                      ,App {_aNode = appDanalyze-tests.enf-gt10::bool
                           , _aAppFun =
                             FDefun { _fInfo = "(defun enf-gt (a:integer b:integer)"
                                    , _fName = "analyze-tests.enf-gt"
                                    , _fType = (a:integer b:integer)-><m>
                                    , _fArgs = ["a"(analyze-tests.enf-gt_a5::integer),"b"(analyze-tests.enf-gt_b6::integer)]
                                    , _fBody = [App { _aNode = appNif7::bool
                                                    , _aAppFun = FNative {_fInfo = ""
                                                                         , _fName = "if"
                                                                         , _fTypes = "(cond:bool then:<a> else:<a>)-><a> :| []"
                                                                         , _fSpecial = Nothing}
                                                    , _aAppArgs =
                                                      [ App { _aNode = appN=8::bool
                                                            , _aAppFun = FNative {_fInfo = , _fName = "=", _fTypes = "(x:<a[integer,string,time,decimal,bool,[<l>],object:<{o}>,keyset]> y:<a[integer,string,time,decimal,bool,[<l>],object:<{o}>,keyset]>)->bool :| []", _fSpecial = Nothing}
                                                            , _aAppArgs = [ Var {_aNode = analyze-tests.tricky1_a0::integer}
                                                                          , Prim {_aNode = integer9::integer, _aPrimValue = PrimLit 10}]
                                                            }
                                                      ,Var {_aNode = analyze-tests.tricky1_a0::integer}
                                                      ,Var {_aNode = analyze-tests.tricky1_b1::integer}]
                                                    }
                                               ]
                                    , _fDocs = Nothing}
                           , _aAppArgs = [Var {_aNode = analyze-tests.tricky1_a0::integer},Var {_aNode = analyze-tests.tricky1_b1::integer}]}]},Prim {_aNode = string11::string, _aPrimValue = PrimLit "bar"}]}], _fDocs = Nothing}}

 (Prim {_aNode = string19::string, _aPrimValue = PrimLit "balance"},App {_aNode = appN-20::integer, _aAppFun = FNative {_fInfo = , _fName = "-", _fTypes = (x:<a[integer,decimal]> y:<a[integer,decimal]>) -> <a[integer,decimal]> :| [(x:<a[integer,decimal]> y:<b[integer,decimal]>) -> decimal,(x:<a[integer,decimal]>) -> <a[integer,decimal]>], _fSpecial = Nothing}, _aAppArgs = [Var {_aNode = bind*5_from-bal6::integer},Var {_aNode = analyze-tests.pay_amount2::integer}]})

Assert (TermQualIdentifierT
        (QIdentifier (ISymbol "not"))
        [TermQualIdentifierT (QIdentifier (ISymbol "="))
         [TermQualIdentifierT (QIdentifier (ISymbol "+"))
          [TermQualIdentifier (QIdentifier (ISymbol "foo1"))
          ,TermQualIdentifier (QIdentifier (ISymbol "bar1"))
          ,TermQualIdentifier (QIdentifier (ISymbol "baz1"))]
         ,TermQualIdentifierT (QIdentifier (ISymbol "+")) [TermQualIdentifier (QIdentifier (ISymbol "foo2")),TermQualIdentifier (QIdentifier (ISymbol "bar2")),TermQualIdentifier (QIdentifier (ISymbol "baz2"))]]])
TopFun
  { _tlFun = FDefun
    { _fInfo = "(defun create-account (id:string initial-balance:integer)"
    , _fName = "analyze-tests.create-account"
    , _fType = "(id:string initial-balance:integer) -> <f>"
    , _fArgs =
      ["id"(analyze-tests.create-account_id0::string)
      ,"initial-balance"(analyze-tests.create-account_initial-balance1::integer)]
    , _fBody =
      [ App
        { _aNode = appNenforce-keyset2::bool
        , _aAppFun = FNative
          { _fInfo = ""
          , _fName = "enforce-keyset"
          , _fTypes = "(keyset-or-name:<k[string,keyset]>) -> bool :| []"
          , _fSpecial = Nothing}
        , _aAppArgs =
          [ Prim {_aNode = string3::string, _aPrimValue = PrimLit "module-keyset"}]
        }
      , App { _aNode = appNenforce4::bool
            , _aAppFun = FNative
              { _fInfo = ""
              , _fName = "enforce"
              , _fTypes = "(test:bool msg:string) -> bool :| []"
              , _fSpecial = Nothing}
            , _aAppArgs =
              [ App { _aNode = "appN>5::bool"
                    , _aAppFun =
                      FNative { _fInfo = ""
                              , _fName = ">"
                              , _fTypes = "(x:<a[integer,decimal,string,time]> y:<a[integer,decimal,string,time]>) -> bool :| []"
                              , _fSpecial = Nothing}
                    , _aAppArgs =
                      [ Var {_aNode = analyze-tests.create-account_initial-balance1::integer}
                      , Prim {_aNode = integer6::integer, _aPrimValue = PrimLit 0}]}
              ,Prim {_aNode = string7::string
                    , _aPrimValue = PrimLit "Initial balance must be > 0"}
              ]
            }
      ,App
       { _aNode = appNinsert8::string
       , _aAppFun = FNative
         { _fInfo = ""
         , _fName = "insert"
         , _fTypes = "(table:table:<{row}> key:string object:object:<{row}>) -> string :| []"
         , _fSpecial = Nothing}
       , _aAppArgs =
         [ Table { _aNode = "analyze-tests.accounts9::table:{analyze-tests.account [balance:integer,data:<e>]}"}
         , Var {_aNode = "analyze-tests.create-account_id0::string"}
         , Object { _aNode = "object10::object:{analyze-tests.account [balance:integer,data:<e>]}"
                  , _aObject =
                    [ (Prim { _aNode = "string11::string"
                            , _aPrimValue = PrimLit "balance"}
                      , Var {_aNode = "analyze-tests.create-account_initial-balance1::integer"})
                    ]
                  }
         ]}
      ]}}

FDefun
  { _fInfo = "(defun pay-with-read (id:string)"
  , _fName = "analyze-tests.pay-with-read"
  , _fType = "(id:string) -> <p>"
  , _fArgs =
    ["id"(analyze-tests.pay-with-read_id0::string)]
  , _fBody =
    [ App { _aNode = appNwith-read1::bool
          , _aAppFun = FNative
            { _fInfo = ""
            , _fName = "with-read"
            , _fTypes = "(table:table:<{row}> key:string bindings:binding:<{row}>) -> <a> :| []"
            , _fSpecial = Just
              ("with-read"
              ,SBinding (Binding { _aNode = bind*3::bool
                                 , _aBindings =
                                     [ ("balance"(bind*3_from-bal4::integer)
                                       ,Var {_aNode = bind*3_from-bal4::integer})
                                     ]
                                 , _aBody =
                                     [ App { _aNode = appNenforce6::bool
                                           , _aAppFun = FNative
                                             { _fInfo = ""
                                             , _fName = "enforce"
                                             , _fTypes = "(test:bool msg:string) -> bool :| []"
                                             , _fSpecial = Nothing}
                                           , _aAppArgs =
                                             [ App { _aNode = appN>=7::bool
                                                   , _aAppFun = FNative
                                                     { _fInfo =""
                                                     , _fName = ">="
                                                     , _fTypes = "(x:<a[integer,decimal,string,time]> y:<a[integer,decimal,string,time]>) -> bool :| []"
                                                     , _fSpecial = Nothing}
                                                   , _aAppArgs =
                                                     [ Var {_aNode = bind*3_from-bal4::integer}
                                                     , Prim {_aNode = integer8::integer, _aPrimValue = PrimLit 0}
                                                     ]}
                                             ,Prim { _aNode = string9::string
                                                   , _aPrimValue = PrimLit "bal too low"}
                                             ]}
                                     ]
                                 , _aBindType = "bindbind*3schema10::binding:{analyze-tests.account [balance:integer,data:<e>]}"
                                 }
                        )
              )
            }
          , _aAppArgs =
            [ Table {_aNode = "analyze-tests.accounts2::table:{analyze-tests.account [balance:integer,data:<e>]}"}
            , Var {_aNode = analyze-tests.pay-with-read_id0::string}
            ]}
    ]}

FDefun { _fInfo = "(defun pay-update (id:string amount:integer)"
       , _fName = "analyze-tests.pay-update"
       , _fType = "(id:string amount:integer) -> <r>"
       , _fArgs =
         ["id"(analyze-tests.pay-update_id0::string)
         ,"amount"(analyze-tests.pay-update_amount1::integer)]
       , _fBody =
         [ App { _aNode = appNwith-read2::string
               , _aAppFun = FNative
                 { _fInfo = ""
                 , _fName = "with-read"
                 , _fTypes = "(table:table:<{row}> key:string bindings:binding:<{row}>) -> <a> :| []"
                 , _fSpecial = Just ("with-read"
                                    , SBinding (Binding { _aNode = bind*4::string
                                                        , _aBindings =
                                                          [ ("balance"(bind*4_from-bal5::integer)
                                                            ,Var {_aNode = bind*4_from-bal5::integer})
                                                          ]
                                                        , _aBody =
                                                          [ App {_aNode = appNupdate7::string
                                                                , _aAppFun = FNative
                                                                  { _fInfo = ""
                                                                  , _fName = "update"
                                                                  , _fTypes = "(table:table:<{row}> key:string object:object:<{row}>) -> string :| []"
                                                                  , _fSpecial = Nothing}
                                                                , _aAppArgs =
                                                                  [ Table {_aNode = "analyze-tests.accounts8::table:{analyze-tests.account [balance:integer,data:<e>]}"}
                                                                  , Var {_aNode = analyze-tests.pay-update_id0::string}
                                                                  ,Object { _aNode = "object9::object:{analyze-tests.account [balance:integer,data:<e>]}"
                                                                          , _aObject =
                                                                            [( Prim {_aNode = string10::string, _aPrimValue = PrimLit "balance"}
                                                                             , App { _aNode = appN+11::integer
                                                                                   , _aAppFun = FNative
                                                                                     { _fInfo = ""
                                                                                     , _fName = "+"
                                                                                     , _fTypes = "(x:<a[integer,decimal]> y:<a[integer,decimal]>) -> <a[integer,decimal]> :| [(x:<a[integer,decimal]> y:<b[integer,decimal]>) -> decimal,(x:<a[string,[<l>],object:<{o}>]> y:<a[string,[<l>],object:<{o}>]>) -> <a[string,[<l>],object:<{o}>]>]"
                                                                                     , _fSpecial = Nothing}
                                                                                   , _aAppArgs =
                                                                                     [ Var {_aNode = analyze-tests.pay-update_amount1::integer}
                                                                                     , Var {_aNode = bind*4_from-bal5::integer}
                                                                                     ]}
                                                                             )
                                                                            ]}
                                                                  ]}
                                                          ]
                                                        , _aBindType = "bindbind*4schema12::binding:{analyze-tests.account [balance:integer,data:<e>]}"
                                                        }
                                               )
                                    )
                 }
               , _aAppArgs =
                 [ Table {_aNode = "analyze-tests.accounts3::table:{analyze-tests.account [balance:integer,data:<e>]}"}
                 , Var {_aNode = analyze-tests.pay-update_id0::string}
                 ]}
         ]
       }

TopFun
  { _tlFun = FDefun
    { _fInfo = "(defun create-account2 (id2 initial-balance2)"
    , _fName = "analyze-tests.create-account2"
    , _fType = "(id2:<e> initial-balance2:<f>)-><g>"
    , _fArgs = ["id2"(analyze-tests.create-account2_id20::string),"initial-balance2"(analyze-tests.create-account2_initial-balance21::integer)]
    , _fBody =
      [ App
        { _aNode = appDanalyze-tests.create-account14::string
        , _aAppFun = FDefun
          { _fInfo = "(defun create-account (id initial-balance) "
          , _fName = "analyze-tests.create-account"
          , _fType = "(id:<b> initial-balance:<c>)-><d>"
          , _fArgs = ["id"(analyze-tests.create-account_id2::string),"initial-balance"(analyze-tests.create-account_initial-balance3::integer)]
          , _fBody =
            [ App
              { _aNode = "appNenforce-keyset4::bool"
              , _aAppFun =
                FNative { _fInfo = ""
                        , _fName = "enforce-keyset"
                        , _fTypes = "(keyset-or-name:<k[string,keyset]>)->bool :| []"
                        , _fSpecial = Nothing}
              , _aAppArgs = [Prim {_aNode = string5::string, _aPrimValue = PrimLit "module-keyset"}]}
            ,App {_aNode = appNenforce6::bool
                 , _aAppFun = FNative
                   { _fInfo = ""
                   , _fName = "enforce"
                   , _fTypes = "(test:bool msg:string)->bool :| []"
                   , _fSpecial = Nothing}
                 , _aAppArgs =
                   [ App { _aNode = appN>=7::bool
                         , _aAppFun = FNative
                           { _fInfo = ""
                           , _fName = ">="
                           , _fTypes = "(x:<a[integer,decimal,string,time]> y:<a[integer,decimal,string,time]>)->bool :| []"
                           , _fSpecial = Nothing}
                         , _aAppArgs = [Var {_aNode = analyze-tests.create-account2_initial-balance21::integer},Prim {_aNode = integer8::integer, _aPrimValue = PrimLit 0}]}
                   , Prim {_aNode = string9::string, _aPrimValue = PrimLit "Initial balance must be > 0"}]}
            ,App {_aNode = appNinsert10::string
                 , _aAppFun = FNative
                   { _fInfo = ""
                   , _fName = "insert"
                   , _fTypes = "(table:table:<{row}> key:string object:object:<{row}>)->string :| []"
                   , _fSpecial = Nothing}
                 , _aAppArgs =
                   [ Table {_aNode = "analyze-tests.accounts11::table:{analyze-tests.account [balance:integer,data:<a>]}"}
                   , Var {_aNode = analyze-tests.create-account2_id20::string}
                   ,Object
                    { _aNode = "object12::object:{analyze-tests.account [balance:integer,data:<a>]}"
                    , _aObject =
                      [ (Prim {_aNode = string13::string, _aPrimValue = PrimLit "balance"}
                        ,Var {_aNode = analyze-tests.create-account2_initial-balance21::integer})
                      ]
                    }
                   ]
                 }
            ]
          , _fDocs = Just "Create a new account for ID with INITIAL-BALANCE funds"}
        , _aAppArgs =
          [Var {_aNode = analyze-tests.create-account2_id20::string}
          ,Var {_aNode = analyze-tests.create-account2_initial-balance21::integer}
          ]
        }
      ]
    , _fDocs = Nothing}}
